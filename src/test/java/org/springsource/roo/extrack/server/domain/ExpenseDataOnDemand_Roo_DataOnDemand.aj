// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.springsource.roo.extrack.server.domain;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springsource.roo.extrack.server.domain.Expense;
import org.springsource.roo.extrack.server.domain.ExpenseDataOnDemand;
import org.springsource.roo.extrack.server.domain.Report;
import org.springsource.roo.extrack.server.domain.ReportDataOnDemand;

privileged aspect ExpenseDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ExpenseDataOnDemand: @Component;
    
    private Random ExpenseDataOnDemand.rnd = new SecureRandom();
    
    private List<Expense> ExpenseDataOnDemand.data;
    
    @Autowired
    private ReportDataOnDemand ExpenseDataOnDemand.reportDataOnDemand;
    
    public Expense ExpenseDataOnDemand.getNewTransientExpense(int index) {
        Expense obj = new Expense();
        setAmount(obj, index);
        setApproval(obj, index);
        setCategory(obj, index);
        setCreated(obj, index);
        setDescription(obj, index);
        setReasonDenied(obj, index);
        setReport(obj, index);
        return obj;
    }
    
    public void ExpenseDataOnDemand.setAmount(Expense obj, int index) {
        Double amount = new Integer(index).doubleValue();
        obj.setAmount(amount);
    }
    
    public void ExpenseDataOnDemand.setApproval(Expense obj, int index) {
        String approval = "approval_" + index;
        obj.setApproval(approval);
    }
    
    public void ExpenseDataOnDemand.setCategory(Expense obj, int index) {
        String category = "category_" + index;
        obj.setCategory(category);
    }
    
    public void ExpenseDataOnDemand.setCreated(Expense obj, int index) {
        Date created = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreated(created);
    }
    
    public void ExpenseDataOnDemand.setDescription(Expense obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void ExpenseDataOnDemand.setReasonDenied(Expense obj, int index) {
        String reasonDenied = "reasonDenied_" + index;
        obj.setReasonDenied(reasonDenied);
    }
    
    public void ExpenseDataOnDemand.setReport(Expense obj, int index) {
        Report report = reportDataOnDemand.getRandomReport();
        obj.setReport(report);
    }
    
    public Expense ExpenseDataOnDemand.getSpecificExpense(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Expense obj = data.get(index);
        Long id = obj.getId();
        return Expense.findExpense(id);
    }
    
    public Expense ExpenseDataOnDemand.getRandomExpense() {
        init();
        Expense obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Expense.findExpense(id);
    }
    
    public boolean ExpenseDataOnDemand.modifyExpense(Expense obj) {
        return false;
    }
    
    public void ExpenseDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Expense.findExpenseEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Expense' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Expense>();
        for (int i = 0; i < 10; i++) {
            Expense obj = getNewTransientExpense(i);
            try {
                obj.persist();
            } catch (ConstraintViolationException e) {
                StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getConstraintDescriptor()).append(":").append(cv.getMessage()).append("=").append(cv.getInvalidValue()).append("]");
                }
                throw new RuntimeException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
